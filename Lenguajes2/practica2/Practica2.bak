#lang plai
;; Ejercicio 1
;; Función que recibe n, r y devuelve el conjunto con los primeros r múltiplos de n.
;; multiplos: number number -> (listof number)
(define (multiplos n r)
     (cond
       [(= r 0) '()]
       [else (append (multiplos n (- r 1)) (cons (* n r)'()))
        
       ]
      )   
)

;; Ejercicio 2
;; Predicado que nos dice si un número m es divisor de otro número n.
;; Si el parámetro recibido es cero, se devuelve un error.
;; divisor?: number number -> number
(define (divisor? m n)
  (if(= m 0) "error el cero no es divisor de nadie"
        (if(= (modulo n m)0) #t
           #f    
           )
     )
  
)

;; Ejercicio 3
;; Función que nos da el una lista de divisores de un número pasado como parámetro
;; divisores: number -> (listof number)
(define (divisores n)
  (filter (lambda (x)(divisor? x n)) (range 1 (+ n 1)))
)

;; Ejercicio 4
;; Función que recibe un elemento a, una lista l y decide si a pertenece a l.
;; pertenece: a (listof a) -> boolean
(define (pertenece? a l)
  (cond
    [(empty? l) #f]
    [else (if(= (car l) a) #t
             (pertenece? a(cdr l))
           )]
   )
)

;; Ejercicio 5
;; Función que recibe una lista l con elementos. Devuelve una lista sin repeticiones con los elementos de l.
;; eliminaRep: (listof a) -> (listof a)
(define (eliminaRepetidos lista)
  (cond
      [(empty? lista) '()]
      [else (cons(car lista)(eliminaRepetidos(
                                              quitaElemento (car lista)(cdr lista)
                                              )))]
    )
 )

(define (quitaElemento a lista)
   (cond
     [(empty? lista) '()]
     [else  (if(equal? a (car lista)) (quitaElemento  a (cdr lista))
               (cons(car lista) (quitaElemento a (cdr lista))  )
               )]
     )
 )
;; Estructura que nos permite modelar puntos en el plano.
;; Sirve para modelar figuras geométricas.
(struct Punto (x y) #:inspector #f)

;; Ejercicio 6
;; Funcion que nos permite calcular el punto equidistante entre dos puntos.
;; Si alguno de los dos parámetros recibidos no es un punto, lanza un error
;; punto-medio: Punto Punto -> Punto
(define (punto-medio p q)
  (Punto (/ (+ (Punto-x p)(Punto-x q)) 2) (/ (+ (Punto-y p)(Punto-y q)) 2) )
 )

;; Ejercicio 7
;; Funcion que nos permite calcular la distancia entre dos puntos.
;; Si alguno de los dos parámetros recibidos no es un punto, lanza un error
;; distancia: Punto Punto -> number
(define (distancia p q)
  (sqrt (+(expt(-(Punto-x q)(Punto-x p))2)(expt(-(Punto-y q)(Punto-y p ))2)))
 )

;; Ejercicio 8
;; Definición del tipo abstracto de datos Figura
(define-type Figura 
  [Circulo   (punto Punto?)
             (radio  number?)]
  [Triangulo (punto1 Punto?)
             (punto2 Punto?)
             (punto3 Punto?)]
  [Rectangulo (punto Punto?)
              (base number?)
              (altura number?)]
  [Cuadrado   (punto Punto?)
              (lado number?)])



;; Ejercicio 9
;; Función que recibe una figura y calcula su perímetro.
;; perimetro: Figura -> number
(define (perimetro fig)
  (cond
    [(Circulo? fig) (* pi (* 2 (Circulo-radio fig))) ]
    [(Cuadrado? fig) (* (Cuadrado-lado fig)4) ]
    [(Rectangulo? fig) (+ (* 2 (Rectangulo-base fig))(* 2 (Rectangulo-base fig)))]
    [(Triangulo? fig) (+ (distancia(Triangulo-punto1 fig)(Triangulo-punto2 fig) )(distancia (Triangulo-punto1 fig)(Triangulo-punto3 fig)) (distancia (Triangulo-punto2 fig) (Triangulo-punto3 fig)) )]
   )
)

;; Ejercicio 10
;; Función que recibe una figura y calcula su área.
;; area: Figura -> number
(define (area fig)
(cond
    [(Circulo? fig) (* pi (expt(Circulo-radio fig) 2)) ]
    [(Cuadrado? fig) (expt (Cuadrado-lado fig) 2 ) ]
    [(Rectangulo? fig) (* (Rectangulo-base fig) (Rectangulo-base fig))]
    [(Triangulo? fig) (* (/ 1 2) (abs(-  (+ (* (Punto-x(Triangulo-punto2 fig))(Punto-y(Triangulo-punto1 fig)) )
                                       (* (Punto-x(Triangulo-punto3 fig))(Punto-y(Triangulo-punto2 fig)) )
                                       (* (Punto-x(Triangulo-punto1 fig))(Punto-y(Triangulo-punto3 fig)) ) )
                                    (+ (* (Punto-x(Triangulo-punto1 fig))(Punto-y(Triangulo-punto2 fig)) )
                                       (* (Punto-x(Triangulo-punto2 fig))(Punto-y(Triangulo-punto3 fig)) )
                                       (* (Punto-x(Triangulo-punto3 fig))(Punto-y(Triangulo-punto1 fig)) ) ) ) ))]
   )
)

;; Punto extra
;; Función que nos da el elemento más repetido en una lista. 
;; Si hay dos o más elementos repetidos el mismo número de veces, devuelve el primero en aparecer de izquierda a derecha.
;; masRepetido (listof a) -> number
(define (masRepetido lista)
  
   (car (last (ordena(creaFrecuencias lista))))
    
   
 )
;; función auxliar que nos ordena una lista de duplas de acuerdo a las segundas entradas de las duplas
;; ordena: (listof a)-> (listof a)
(define (ordena lista) 
  (define (object-greater? a b)
    (<= (car (cdr a)) (car (cdr b))))
  (sort lista object-greater?))

;; funcion que nos dice cuantas veces se repite un elemento a en una lista
;; dimeRepetidos: a -> (listof a) -> number  
(define (dimeRepetidos a lista)
    (cond
      [(empty? lista) 0]
      [else (if (= (car lista) a )  (+ 1 (dimeRepetidos a (cdr lista)))
             (dimeRepetidos a (cdr lista))   )]
     )
  )
;; función auxiliar que nos crea una lista de duplas donde la primera entrada es el numero de la lista, y la segunda
; nos dice cuantas veces aparece
;; creaFrecuencias : (listof a) -> (listof (a,a))
(define (creaFrecuencias lista)
     (cond
       [(empty? lista) '()]
       [else (cons (cons (car lista)( list(dimeRepetidos (car lista) lista))) (creaFrecuencias  (quitaElemento (car lista) lista)  ))]
     )
 )

(define a (Punto 2 2))
(define b (Punto 2 8))
(define c (Circulo (Punto 0 0) 1))


(test (perimetro c) 6.283185307179586)
(test (distancia a b) 6)
(test (punto-medio a b) (Punto 2 5))




  